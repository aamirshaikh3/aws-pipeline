name: Deploy Docker to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:  # This allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up SSH key for EC2 access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Run Docker commands on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST_DNS }} << 'EOF'
          # Update and install necessary packages
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo systemctl start docker
          sudo systemctl enable docker
         
          # Verify Docker installation
          docker --version
          sudo systemctl status docker
         
          # Add ubuntu user to docker group
          sudo usermod -aG docker ubuntu
          newgrp docker  # Refresh group membership immediately
         
          # Ensure docker is working properly by listing images and containers
          sudo docker ps -a
          sudo docker images
          
          # Clone repository if not exists or update if exists
          if [ -d "aws-pipeline" ]; then
            cd aws-pipeline
            git reset --hard  # Discard any local changes
            git pull  # Pull the latest changes
          else
            git clone https://github.com/aamirshaikh3/aws-pipeline.git
            cd aws-pipeline
          fi

         # Create Dockerfile_1 using printf to ensure correct line breaks
         printf "FROM nginx:alpine\nCOPY aws-pipeline/contact.html /usr/share/nginx/html/contact.html\nEXPOSE 80\n" > Dockerfile_1

          # Build the Docker image
          sudo docker build -t my-nginx-image .
         
          # Check if Docker build was successful
          if [ $? -eq 0 ]; then
            echo "Docker build successful."
          else
            echo "Docker build failed."
            exit 1
          fi
         
          # Stop and remove the existing container (if any)
          sudo docker ps -a -q -f name=my-container | grep -q . && sudo docker stop my-container && sudo docker rm my-container || echo "No existing container to stop/remove."
         
          # Run the Docker container
          sudo docker run -d -p 80:80 --name my-container my-nginx-image
          
          # Ensure the container is running
          sudo docker ps -a
          sudo docker logs my-container
        EOF
