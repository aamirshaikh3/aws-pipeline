name: Deploy Docker to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:  # This allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up SSH key for EC2 access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Install Docker
      run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo systemctl start docker
          sudo systemctl enable docker

    - name: Create target directory
      run: |
          sudo mkdir -p /var/www/html

    - name: Move files to target directory
      run: |
          sudo mv * /var/www/html

    - name: Run Docker commands on EC2
      run: |
          ssh -t -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST_DNS }} << 'EOF'
            # Clone the GitHub repository
            git clone https://github.com/aamirshaikh3/aws-pipeline.git
            cd aws-pipeline
            # Create a Dockerfile
            cat > Dockerfile << 'DOCKERFILE'
            FROM nginx:alpine
            WORKDIR /aws-pipeline
            COPY . .
            RUN cp contact.html /usr/share/nginx/html/
            EXPOSE 80
            DOCKERFILE
            # Build the Docker image
            docker build -t my-nginx-image .
            # Stop and remove the existing container (if any)
            docker stop my-container || true
            docker rm my-container || true
            # Run the Docker container
            docker run -d -p 80:80 --name my-container my-nginx-image
          EOF
